<?php
namespace App\Tests;

use App\Entity\Order;
use App\Entity\Product;
use phpDocumentor\Reflection\Types\True_;

class OrdersTest extends DatabaseDependantTestCase {

    private string $deliveryName = "delivery name";
    private  string $deliveryAddress = "delivery address";
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        //SETUP

        $order = new Order();
        $order->setDeliveryName($this->deliveryName);
        $order->setDeliveryAddress($this->deliveryAddress);

        //DO SOMETHING
        $this->entityManager->persist($order);
        $this->entityManager->flush();
    }

    /** @test */
    public function an_order_can_be_created()
    {
        //MAKE ASSERTIONS
        $this->assertDatabaseHas(Order::class,
            ['deliveryName' => $this->deliveryName,
                'deliveryAddress' => $this->deliveryAddress,
                'cancelledAt' => null]);


    }

    /** @test */
    public function an_order_can_be_updated()
    {
        //SETUP
        /** @var Order $order */
        $order = $this->entityManager->getRepository(Order::class)->findOneBy(
            ['deliveryName' => $this->deliveryName]
        );

        $newAddress = "nouvelle address";
        $order->setDeliveryAddress($newAddress);
        $this->entityManager->persist($order);
        $this->entityManager->flush();

        $this->assertDatabaseHas(Order::class,
            ['deliveryName' => $this->deliveryName,
                'deliveryAddress' => $newAddress]);

    }

    /** @test */
    public function an_order_can_be_cancelled()
    {
        //SETUP
        /** @var Order $order */
        $order = $this->entityManager->getRepository(Order::class)->findOneBy(
            ['deliveryName' => $this->deliveryName]
        );

        $cancelledAt = new \DateTimeImmutable();

        //DO SOMETHING
        $order->setCancelledAt($cancelledAt);
        $this->entityManager->persist($order);
        $this->entityManager->flush();

        //MAKE ASSERTIONS
        $this->assertDatabaseHas(Order::class,
            ['deliveryName' => $this->deliveryName,
                'deliveryAddress' => $this->deliveryAddress,
                'cancelledAt' => $cancelledAt]);
    }

    /** @test */
    public function an_item_can_be_added_to_an_order()
    {
        //SETUP
        //Need a product
        $name = 'my product name';
        $description = 'my product description';
        $product = new Product();
        $product->setName($name);
        $product->setDescription($description);
        $product->setPrice(94400);

        //DO SOMETHING
        $this->entityManager->persist($product);
        $this->entityManager->flush();

        //Need an order
        /** @var Order $order */
        $order = $this->entityManager->getRepository(Order::class)->findOneBy(
            ['deliveryName' => $this->deliveryName]
        );
        //DO SOMETHING
        //Create an item using refs to order and product
        $item = new Item();
        $item->setOrder($order);
        $item->setProduct($product);
        $item->setPrice($product->getPrice());

        $this->entityManager->persist($item);
        $this->entityManager->flush();

        //MAKE ASSERTIONS
        $this->assertDatabaseHas(Item::class,
            ['price' => $product->getPrice()]);
    }

}